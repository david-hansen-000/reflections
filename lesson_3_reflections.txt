What happens when you initialize a repository? Why do you need to do it?

--- Initializing a repository sets up the directory for use with git commands. Basically a .git directory is created containing the metadata for the git functions. Without doing this the directory is not recognized as a git repository.

How is the staging area different from the working directory and the repository? What value do you think it offers?

--- The staging area allows there to be an extra layer of assurance to see just what we're going to commit. Most people will just add everything (git add *) but then want to see just what is going to be included. I'm not sure where the .gitignore comes into play. with a git add * ? or is there another command that makes sure to look at the .gitignore?

How can you use the staging area to make sure you have one commit per logical change?

--- I can look at the staging area by using git status to see what files are there and then do git diff and git diff --staging to see the cumulation of changes that have been made and verify that the changes are grouped to one logical change.

What are some situations when branches would be helpful in keeping your history organized? How would branches help?

--- Branches could be helpful when working with experimental changes, or in general, changes that may be in a logical sense different from the main focus of the project but maybe useful if they pan out.

How do the diagrams help you visualize the branch structure?

--- Diagrams can help get focused on the specific point where changes are made.

What is the result of merging two branches together? Why do we represent it in the diagram the way we do?

--- Branches merging together is like a major commit. Representing them as looking back towards the beginning is to see where the changed files are likely to start being different.

What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges manually?

--- The pros of auto merging: the user doesn't have to sift through code to figure out why a change was made or the differences between the branched files. The cons: code may merge with arbitrary junk that doesn't need to be there. 


